// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Asistencia", b =>
                {
                    b.Property<int>("AsistenciaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AsistenciaID"));

                    b.Property<bool>("Asistio")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("date");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("InscripcionID")
                        .HasColumnType("int");

                    b.HasKey("AsistenciaID");

                    b.HasIndex("InscripcionID", "Fecha")
                        .HasDatabaseName("IX_Asistencia_Inscripcion_Fecha");

                    b.ToTable("Asistencias", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Calificacion", b =>
                {
                    b.Property<int>("CalificacionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CalificacionID"));

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("InscripcionID")
                        .HasColumnType("int");

                    b.Property<string>("Literal")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<decimal?>("Nota")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("CalificacionID");

                    b.HasIndex("InscripcionID")
                        .HasDatabaseName("IX_Calificacion_InscripcionID");

                    b.ToTable("Calificaciones", null, t =>
                        {
                            t.HasCheckConstraint("CK_Calificacion_Literal", "Literal IN ('A', 'B', 'C', 'F')");

                            t.HasCheckConstraint("CK_Calificacion_Nota", "Nota BETWEEN 0 AND 100");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Estudiante", b =>
                {
                    b.Property<int>("EstudianteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EstudianteID"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Matricula")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("EstudianteID");

                    b.HasIndex("Matricula")
                        .IsUnique();

                    b.ToTable("Estudiantes", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Inscripcion", b =>
                {
                    b.Property<int>("InscripcionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InscripcionID"));

                    b.Property<int>("EstudianteID")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("MateriaID")
                        .HasColumnType("int");

                    b.Property<int>("PeriodoID")
                        .HasColumnType("int");

                    b.HasKey("InscripcionID");

                    b.HasIndex("MateriaID");

                    b.HasIndex("EstudianteID", "PeriodoID")
                        .HasDatabaseName("IX_Inscripcion_Estudiante_Periodo");

                    b.HasIndex("PeriodoID", "MateriaID")
                        .HasDatabaseName("IX_Inscripcion_Periodo_Materia");

                    b.HasIndex("EstudianteID", "MateriaID", "PeriodoID")
                        .IsUnique()
                        .HasDatabaseName("IX_Inscripcion_Estudiante_Materia_Periodo");

                    b.ToTable("Inscripciones", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Materia", b =>
                {
                    b.Property<int>("MateriaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MateriaID"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProfesorID")
                        .HasColumnType("int");

                    b.HasKey("MateriaID");

                    b.HasIndex("ProfesorID");

                    b.ToTable("Materias", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Periodo", b =>
                {
                    b.Property<int>("PeriodoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PeriodoID"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("date");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("date");

                    b.Property<string>("NombrePeriodo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("PeriodoID");

                    b.ToTable("Periodos", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Profesor", b =>
                {
                    b.Property<int>("ProfesorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfesorID"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Clave")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ProfesorID");

                    b.HasIndex("Correo")
                        .IsUnique();

                    b.ToTable("Profesores", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Asistencia", b =>
                {
                    b.HasOne("Domain.Entities.Inscripcion", "Inscripcion")
                        .WithMany("Asistencias")
                        .HasForeignKey("InscripcionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inscripcion");
                });

            modelBuilder.Entity("Domain.Entities.Calificacion", b =>
                {
                    b.HasOne("Domain.Entities.Inscripcion", "Inscripcion")
                        .WithMany("Calificaciones")
                        .HasForeignKey("InscripcionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inscripcion");
                });

            modelBuilder.Entity("Domain.Entities.Inscripcion", b =>
                {
                    b.HasOne("Domain.Entities.Estudiante", "Estudiante")
                        .WithMany("Inscripciones")
                        .HasForeignKey("EstudianteID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Materia", "Materia")
                        .WithMany("Inscripciones")
                        .HasForeignKey("MateriaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Periodo", "Periodo")
                        .WithMany("Inscripciones")
                        .HasForeignKey("PeriodoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Estudiante");

                    b.Navigation("Materia");

                    b.Navigation("Periodo");
                });

            modelBuilder.Entity("Domain.Entities.Materia", b =>
                {
                    b.HasOne("Domain.Entities.Profesor", "Profesor")
                        .WithMany("Materias")
                        .HasForeignKey("ProfesorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Profesor");
                });

            modelBuilder.Entity("Domain.Entities.Estudiante", b =>
                {
                    b.Navigation("Inscripciones");
                });

            modelBuilder.Entity("Domain.Entities.Inscripcion", b =>
                {
                    b.Navigation("Asistencias");

                    b.Navigation("Calificaciones");
                });

            modelBuilder.Entity("Domain.Entities.Materia", b =>
                {
                    b.Navigation("Inscripciones");
                });

            modelBuilder.Entity("Domain.Entities.Periodo", b =>
                {
                    b.Navigation("Inscripciones");
                });

            modelBuilder.Entity("Domain.Entities.Profesor", b =>
                {
                    b.Navigation("Materias");
                });
#pragma warning restore 612, 618
        }
    }
}
